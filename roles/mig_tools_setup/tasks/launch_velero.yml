---
- include_vars:
    file: "{{ playbook_dir }}/config/velero_aws_creds.yml"

- name: Apply velero common prereqs
  k8s:
    state: "{{ state }}"
    definition: "{{ lookup('file', '{{ playbook_dir }}/velero/config/common/00-prereqs.yaml')}}"

- name: Create aws backupstoragelocation for velero
  k8s:
    state: "{{ state }}"
    definition: "{{ lookup('template', '05-ark-aws-backupstoragelocation.yaml.j2') | from_yaml }}"

- name: Create aws volumesnapshotlocation for velero
  k8s:
    state: "{{ state }}"
    definition: "{{ lookup('template', '06-ark-aws-volumesnapshotlocation.yaml.j2') | from_yaml }}"

- name: Create aws bucket cloud creds
  k8s:
    state: "{{ state }}"
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: cloud-credentials
        namespace: velero
      data:
        cloud: "{{ lookup('template', 'cloud-credentials.j2') | b64encode }}"

- name: Create velero deployment
  k8s:
    state: "{{ state }}"
    definition: "{{ lookup('file', '{{ playbook_dir }}/velero/config/minio/20-deployment.yaml')}}"

- name: Create restic daemonset
  k8s:
    state: "{{ state }}"
    definition: "{{ lookup('file', '{{ playbook_dir }}/velero/config/minio/30-restic-daemonset.yaml')}}"

- name: Check status of velero deployment
  k8s_facts:
    kind: Deployment
    api_version: extensions/v1beta1
    namespace: velero
    name: velero
    label_selectors: "component=velero"
  register: deploy
  until:  deploy.get("resources", [])
          and deploy.resources[0].get("spec", {}).get("replicas", -1) == deploy.resources[0].get("status", {}).get("availableReplicas", 0)
  retries: 60
  delay: 5

- set_fact:
    plugin: "{{ deploy.resources | length > 0 and deploy.resources[0].spec.template.spec.get('initContainers', [{}])[0].get('image', '') == 'quay.io/ocpmigrate/velero-plugin' }}"

- name: Integrate velero plugin
  block:

    - name: Run velero plugin add
      shell: "{{ playbook_dir }}/velero/velero plugin add quay.io/ocpmigrate/velero-plugin"

    - name: Allow velero plugin to settle
      pause:
        seconds: 5

    - name: Check status of velero plugin integration
      k8s_facts:
        kind: Deployment
        api_version: extensions/v1beta1
        namespace: velero
        name: velero
        label_selectors: "component=velero"
      register: deploy
      until:  deploy.get("resources", [])
              and deploy.resources[0].get("spec", {}).get("replicas", -1) == deploy.resources[0].get("status", {}).get("availableReplicas", 0)
      retries: 60
      delay: 5

  when: not plugin

- name: Check status of restic deployment
  k8s_facts:
    kind: DaemonSet
    api_version: extensions/v1beta1
    namespace: velero
    name: restic
    label_selectors: "name=restic"
  register: dset
  until: dset.get("resources", [])
         and dset.resources[0].get("status", {}).get("desiredNumberScheduled", -1) == dset.resources[0].get("status", {}).get("numberReady", 0)
  retries: 60
  delay: 5
