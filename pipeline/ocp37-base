#!groovy

// Set Job properties and triggers
properties([disableConcurrentBuilds(), 
parameters([string(defaultValue: 'v3.7', description: 'OpenShift version to deploy', name: 'OPENSHIFT_VERSION', trim: false), 
credentials(credentialType: 'org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl', defaultValue: 'ci_aws_access_key_id', description: 'EC2 access key ID for auth purposes', name: 'EC2_ACCESS_KEY_ID', required: true),
credentials(credentialType: 'org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl', defaultValue: 'ci_aws_secret_access_key', description: 'EC2 private key needed to access instances, from Jenkins credentials store', name: 'EC2_SECRET_ACCESS_KEY', required: true),
credentials(credentialType: 'org.jenkinsci.plugins.plaincredentials.impl.FileCredentialsImpl', defaultValue: 'ci_ec2_key', description: 'EC2 private key needed to access instances, from Jenkins credentials store', name: 'EC2_PRIV_KEY', required: true),
string(defaultValue: 'ci', description: 'EC2 SSH key name to deploy on instances for remote access ', name: 'EC2_KEY', trim: false),
string(defaultValue: 'ci.pem', description: 'EC2 SSH private key filename to access instances', name: 'EC2_PRIVATE_KEY_FILE', trim: false),
string(defaultValue: 'us-east-1', description: 'EC2 region to deploy instances', name: 'EC2_REGION', trim: false),
string(defaultValue: 'm4.large', description: 'EC2 instance type to deploy', name: 'EC2_INSTANCE_TYPE', trim: false),
string(defaultValue: 'https://github.com/fusor/mig-ci.git', description: 'MIG CI repo URL to checkout', name: 'MIG_CI_REPO', trim: false),
string(defaultValue: 'master', description: 'MIG CI repo branch to checkout', name: 'MIG_CI_BRANCH', trim: false),
booleanParam(defaultValue: true, description: 'EC2 terminate instances after build', name: 'EC2_TERMINATE_INSTANCES')]),
[$class: 'ThrottleJobProperty', categories: ['OCP'], limitOneJobWithMatchingParams: true, maxConcurrentPerNode: 0, maxConcurrentTotal: 0, paramsToUseForLimit: '', throttleEnabled: true, throttleOption: 'category'],
pipelineTriggers([cron('@midnight')])])

// true/false build parameter that defines if we terminate instances once build is done
def EC2_TERMINATE_INSTANCES = params.EC2_TERMINATE_INSTANCES

echo "Running job ${env.JOB_NAME}, build ${env.BUILD_ID} on ${env.JENKINS_URL}"
echo "Build URL ${env.BUILD_URL}"
echo "Job URL ${env.JOB_URL}"

node {
    try {
        notifyBuild('STARTED')   
        stage('Prepare Build Environment') {
            
            echo 'Cloning origin3-dev repo'
            checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'origin3-dev']], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/fusor/origin3-dev.git']]])
            
            // Prepare EC2 key for ansible consumption
            KEYS_DIR = "${env.WORKSPACE}" + '/keys'
            sh "mkdir -p ${KEYS_DIR}"
            
            withCredentials([file(credentialsId: "$EC2_PRIV_KEY", variable: "SSH_PRIV_KEY")]) {
             
                sh "cat ${SSH_PRIV_KEY} > ${KEYS_DIR}/${EC2_PRIVATE_KEY_FILE}"
                sh "chmod 600 ${KEYS_DIR}/${EC2_PRIVATE_KEY_FILE}"
            }

            dir('origin3-dev') {
                sh 'cp -f config.yml.example config.yml'
                sh 'rm -f overrides.yml'
                def overrides = ['ec2_key': "$EC2_KEY",
                    'ec2_private_key_file': "$KEYS_DIR/$EC2_PRIVATE_KEY_FILE",
                    'ec2_instance_type': "$EC2_INSTANCE_TYPE",
                    'ec2_repo_create': false,
                    'openshift_setup_client_version': "$OPENSHIFT_VERSION",
                    'openshift_setup_cluster_retries': 5]
                writeYaml file: 'overrides.yml', data: overrides
            }

            echo 'Cloning ocp-mig-test-data repo'
            checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'ocp-mig-test-data']], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/fusor/ocp-mig-test-data.git']]])
            
            echo 'Cloning mig-ci repo'
            checkout([$class: 'GitSCM', branches: [[name: "*/$MIG_CI_BRANCH"]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'mig-ci']], submoduleCfg: [], userRemoteConfigs: [[url: "$MIG_CI_REPO"]]])
    }
    
        stage('Deploy OCP3') {
            withCredentials([
                string(credentialsId: "$EC2_ACCESS_KEY_ID", variable: 'AWS_ACCESS_KEY_ID'),
                string(credentialsId: "$EC2_SECRET_ACCESS_KEY", variable: 'AWS_SECRET_ACCESS_KEY')
                ]) 
            {
                dir('origin3-dev') {
                    withEnv(['PATH+EXTRA=~/bin']) {
                        echo "${KEYS_DIR}"
                        ansiColor('xterm') {
                            ansiblePlaybook(
                                playbook: 'deploy.yml',
                                extras: "-e @overrides.yml",
                                hostKeyChecking: false,
                                unbuffered: true,
                                colorized: true)
                        }
                    }
                }
            }
        }

        stage('Login OCP3') {
            withCredentials([
                string(credentialsId: "$EC2_ACCESS_KEY_ID", variable: 'AWS_ACCESS_KEY_ID'),
                string(credentialsId: "$EC2_SECRET_ACCESS_KEY", variable: 'AWS_SECRET_ACCESS_KEY')
                ]) 
            {
                dir('mig-ci') {
                    withEnv(['PATH+EXTRA=~/bin']) {
                        ansiColor('xterm') {
                            ansiblePlaybook(
                                playbook: 'login_origin3_dev.yml',
                                hostKeyChecking: false,
                                unbuffered: true,
                                colorized: true)
                        }
                    }
                }
            }
        }
        
        stage('Load Sample Data/Apps on OCP3') {
           
            dir('ocp-mig-test-data') {
                withEnv(['PATH+EXTRA=~/bin']) {
                    ansiColor('xterm') {
                        ansiblePlaybook(
                            playbook: 'nginx.yml',
                            extras: '-e "with_backup=false" -e "with_restore=false"',
                            hostKeyChecking: false,
                            unbuffered: true,
                            colorized: true)
                    }
                }
            }
        }
        
        stage('Run OCP3 Sanity Checks') {
           
            dir('mig-ci') {
                withEnv(['PATH+EXTRA=~/bin']) {
                    ansiColor('xterm') {
                        ansiblePlaybook(
                            playbook: 'ocp_sanity_check.yml',
                            extras: '',
                            hostKeyChecking: false,
                            unbuffered: true,
                            colorized: true)
                    }
                }
            }
        } 
    	stage('Clean Up Environment') {
            
            	if (EC2_TERMINATE_INSTANCES) {
                
                	withCredentials([
                    		string(credentialsId: "$EC2_ACCESS_KEY_ID", variable: 'AWS_ACCESS_KEY_ID'),
                            string(credentialsId: "$EC2_SECRET_ACCESS_KEY", variable: 'AWS_SECRET_ACCESS_KEY')
                    	]) 
                {
                    dir('origin3-dev') {
                        ansiColor('xterm') {
                            ansiblePlaybook(
                                playbook: 'terminate.yml',
                                extras: '-e "ec2_force_terminate_instances=true"',
                                hostKeyChecking: false,
                                unbuffered: true,
                                colorized: true)
                        }
                    }
                }
            }
            cleanWs cleanWhenFailure: false, notFailBuild: true
        }
        
    } catch (e) {
        currentBuild.result = "FAILED"
        throw e
    } finally {
        // Success or failure, always send notifications
        notifyBuild(currentBuild.result)
    }
}

def notifyBuild(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESSFUL'
 
  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME}, build [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"
 
  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL') {
    colorCode = '#00FF00'
  } else {
    colorCode = '#FF0000'
  }
 
  // Send notifications
  slackSend (color: colorCode, message: summary)
}
